name: Run Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Notify test start to webhook
      env:
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      run: |
        if [ -z "$WEBHOOK_URL" ]; then
          echo "WEBHOOK_URL is not set, skipping start notification"
          exit 0
        fi

        PAYLOAD=$(cat <<EOF
        {
          "text": "„ÉÜ„Çπ„ÉàÈñãÂßãÈÄöÁü•",
          "attachments": [
            {
              "color": "#0000ff",
              "fields": [
                {
                  "title": "„Çπ„ÉÜ„Éº„Çø„Çπ",
                  "value": "üöÄ „ÉÜ„Çπ„ÉàÈñãÂßã",
                  "short": true
                },
                {
                  "title": "„É™„Éù„Ç∏„Éà„É™",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "„Éñ„É©„É≥„ÉÅ",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "„Ç≥„Éü„ÉÉ„Éà",
                  "value": "${{ github.sha }}",
                  "short": true
                },
                {
                  "title": "ÂÆüË°åËÄÖ",
                  "value": "${{ github.actor }}",
                  "short": true
                },
                {
                  "title": "„Ç§„Éô„É≥„Éà",
                  "value": "${{ github.event_name }}",
                  "short": true
                }
              ],
              "footer": "GitHub Actions",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        curl -X POST -H 'Content-type: application/json' \
          --data "$PAYLOAD" \
          "$WEBHOOK_URL"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies with uv
      run: |
        uv pip install --system -r requirements.txt
        uv pip install --system pytest pytest-cov

    - name: Run tests with pytest
      id: test
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
        GOOGLE_SHEET_CREDENTIALS: ${{ secrets.GOOGLE_SHEET_CREDENTIALS }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        FLASK_ENV: testing
        TESTING: true
        IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}
      run: |
        python -m pytest app/tests/tests.py -v --tb=short
        echo "test_result=success" >> $GITHUB_OUTPUT

    - name: Notify test results to webhook
      if: always()
      env:
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      run: |
        if [ -z "$WEBHOOK_URL" ]; then
          echo "WEBHOOK_URL is not set, skipping notification"
          exit 0
        fi

        if [ "${{ steps.test.outcome }}" == "success" ]; then
          STATUS="‚úÖ ÊàêÂäü"
          COLOR="good"
        else
          STATUS="‚ùå Â§±Êïó"
          COLOR="danger"
        fi

        PAYLOAD=$(cat <<EOF
        {
          "text": "„ÉÜ„Çπ„ÉàÁµêÊûúÈÄöÁü•",
          "attachments": [
            {
              "color": "$COLOR",
              "fields": [
                {
                  "title": "„Çπ„ÉÜ„Éº„Çø„Çπ",
                  "value": "$STATUS",
                  "short": true
                },
                {
                  "title": "„É™„Éù„Ç∏„Éà„É™",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "„Éñ„É©„É≥„ÉÅ",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "„Ç≥„Éü„ÉÉ„Éà",
                  "value": "${{ github.sha }}",
                  "short": true
                },
                {
                  "title": "ÂÆüË°åËÄÖ",
                  "value": "${{ github.actor }}",
                  "short": true
                },
                {
                  "title": "„Ç§„Éô„É≥„Éà",
                  "value": "${{ github.event_name }}",
                  "short": true
                }
              ],
              "footer": "GitHub Actions",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        curl -X POST -H 'Content-type: application/json' \
          --data "$PAYLOAD" \
          "$WEBHOOK_URL"

    - name: Check for skip conditions and notify
      if: always()
      env:
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      run: |
        if [ -z "$WEBHOOK_URL" ]; then
          echo "WEBHOOK_URL is not set, skipping skip notification"
          exit 0
        fi

        SKIP_PREVIEW=false
        SKIP_RENDER=false
        SKIP_MESSAGE=""

        # Check PR title for preview skip
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          PR_TITLE="${{ github.event.pull_request.title }}"
          if echo "$PR_TITLE" | grep -qiE "\[skip preview\]|\[preview skip\]"; then
            SKIP_PREVIEW=true
            SKIP_MESSAGE="PR„Çø„Ç§„Éà„É´„Å´preview skip„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü"
          fi
        fi

        # Check commit message for render skip
        COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
        if echo "$COMMIT_MESSAGE" | grep -qiE "\[skip render\]|\[render skip\]"; then
          SKIP_RENDER=true
          if [ -n "$SKIP_MESSAGE" ]; then
            SKIP_MESSAGE="$SKIP_MESSAGE, „Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Å´render skip„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü"
          else
            SKIP_MESSAGE="„Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Å´render skip„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü"
          fi
        fi

        # Send notification if any skip conditions are met
        if [ "$SKIP_PREVIEW" = true ] || [ "$SKIP_RENDER" = true ]; then
          PAYLOAD='{
            "text": "„Çπ„Ç≠„ÉÉ„ÉóÊù°‰ª∂Ê§úÂá∫ÈÄöÁü•",
            "attachments": [
              {
                "color": "#ffa500",
                "fields": [
                  {
                    "title": "„Çπ„ÉÜ„Éº„Çø„Çπ",
                    "value": "‚ö†Ô∏è „Çπ„Ç≠„ÉÉ„ÉóÊù°‰ª∂Ê§úÂá∫",
                    "short": true
                  },
                  {
                    "title": "Ë©≥Á¥∞",
                    "value": "'"$SKIP_MESSAGE"'",
                    "short": false
                  },
                  {
                    "title": "„É™„Éù„Ç∏„Éà„É™",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "„Éñ„É©„É≥„ÉÅ",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "„Ç≥„Éü„ÉÉ„Éà",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "ÂÆüË°åËÄÖ",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "„Ç§„Éô„É≥„Éà",
                    "value": "${{ github.event_name }}",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions",
                "ts": '$(date +%s)'
              }
            ]
          }'

          curl -X POST -H 'Content-type: application/json' \
            --data "$PAYLOAD" \
            "$WEBHOOK_URL"
        else
          echo "No skip conditions detected"
        fi
