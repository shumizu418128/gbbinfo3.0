"""
Django settings for gbbinfojpn project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

if os.getenv("ENVIRONMENT_CHECK") == "qawsedrftgyhujikolp":
    DEBUG = True
    SECRET_KEY = "test"
    IS_LOCAL = True
    IS_PULL_REQUEST = False
    load_dotenv()
else:
    DEBUG = False
    SECRET_KEY = os.getenv("SECRET_KEY")
    IS_LOCAL = False
    IS_PULL_REQUEST = os.getenv("IS_PULL_REQUEST") == "True"

ALLOWED_HOSTS = []

# この環境変数はRenderによって自動で設定される
RENDER_EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "gbbinfojpn.database",
    "gbbinfojpn.app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # 国際化ミドルウェア
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "gbbinfojpn.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "app" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",  # 国際化コンテキスト
                "gbbinfojpn.app.context_processors.common_variables",
            ],
        },
    },
]

WSGI_APPLICATION = "gbbinfojpn.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    # Supabaseをdefaultとして利用
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("SUPABASE_DB_NAME"),
        "USER": os.getenv("SUPABASE_DB_USER"),
        "PASSWORD": os.getenv("SUPABASE_DB_PASSWORD"),
        "HOST": os.getenv("SUPABASE_DB_HOST"),
        "PORT": os.getenv("SUPABASE_DB_PORT"),
        "OPTIONS": {
            "sslmode": "require",
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ja"  # デフォルト言語を日本語に

TIME_ZONE = "Asia/Tokyo"  # タイムゾーンを日本時間に

USE_I18N = True  # 国際化を有効化

USE_L10N = True  # ローカル化を有効化

USE_TZ = True


LOCALE_PATHS = [
    BASE_DIR / "locale",
]

LANGUAGES = [
    ("ja", "日本語"),
    ("ko", "한국어"),
    ("en", "English"),
    ("de", "Deutsch"),
    ("es", "Español"),
    ("fr", "Français"),
    ("hi", "हिन्दी"),
    ("hu", "Magyar"),
    ("it", "Italiano"),
    ("ms", "Bahasa MY"),
    ("no", "Norsk"),
    ("ta", "தமிழ்"),
    ("th", "ไทย"),
    ("zh-hans", "简体中文"),
    ("zh-hant", "繁體中文"),
]
SUPPORTED_LANGUAGE_CODES = [code for code, _ in LANGUAGES]


def _check_locale_paths_and_languages():
    """
    LOCALE_PATHS内の各フォルダ（言語コード）とSUPPORTED_LANGUAGE_CODESが一致しているかを検証します。
    ただし、日本語（'ja'）は例外としてチェック対象外とします。
    一致しない場合は例外を発生させます。

    Raises:
        Exception: サポートされていない言語コードのlocaleフォルダが存在する場合、または
                  SUPPORTED_LANGUAGE_CODESに存在するがlocaleフォルダがない場合。
                  （いずれも日本語は例外）
    """
    locale_dirs = []
    for path in LOCALE_PATHS:
        if os.path.isdir(path):
            for entry in os.listdir(path):
                full_path = os.path.join(path, entry)
                if os.path.isdir(full_path):
                    locale_dirs.append(entry)
    locale_dirs_set = set(locale_dirs)
    supported_set = set(SUPPORTED_LANGUAGE_CODES)

    # 日本語（'ja'）は例外として除外
    locale_dirs_set_no_ja = locale_dirs_set - {"ja"}
    supported_set_no_ja = supported_set - {"ja"}

    # localeディレクトリにあるが、SUPPORTED_LANGUAGE_CODESにないもの
    extra_locales = locale_dirs_set_no_ja - supported_set_no_ja
    # SUPPORTED_LANGUAGE_CODESにあるが、localeディレクトリにないもの
    missing_locales = supported_set_no_ja - locale_dirs_set_no_ja

    error_msgs = []
    if extra_locales:
        error_msgs.append(
            f"LOCALE_PATHSに存在するがSUPPORTED_LANGUAGE_CODESに含まれていない言語コード: {sorted(extra_locales)}"
        )
    if missing_locales:
        error_msgs.append(
            f"SUPPORTED_LANGUAGE_CODESに存在するがLOCALE_PATHSにフォルダが存在しない言語コード: {sorted(missing_locales)}"
        )
    if error_msgs:
        raise Exception("ロケール設定エラー:\n" + "\n".join(error_msgs))


_check_locale_paths_and_languages()


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

APPEND_SLASH = False

LAST_UPDATED = datetime.now()
